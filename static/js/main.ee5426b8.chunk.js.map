{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","require","App","props","getResult","country","method","url","headers","then","result","covid19Stats","data","original","some","item","unshift","setState","HTTP","Promise","resolve","reject","query","response","catch","error","search","e","state","filter","toLowerCase","match","target","value","lastChecked","this","className","onClick","type","onChange","length","map","key","totalCases","newCases","newDeaths","totalRecovered","activeCases","src","width","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,yICGrCC,G,YAAQC,EAAQ,KA8HPC,E,kDA1Hb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAcRC,UAAW,SAACC,GAmBVL,EAAM,CACHM,OAAQ,MACRC,IAAK,kDACLC,QAAS,CACP,eAAgB,mBAChB,cAAiB,0DAGnBC,MAAK,SAACC,GACL,IAAIC,EAAeD,EAAOE,KAAKF,OAC3BG,EAAYH,EAAOE,KAAKF,OAC5BG,EAASC,MAAK,SAAAC,GAAI,MAAoB,SAAhBA,EAAKV,SAAsBQ,EAASG,QAAQD,MAClE,EAAKE,SAAS,CAACN,eAAcE,iBA9ChB,EAmDnBK,KAAO,SAACZ,EAAQC,EAAKK,GAAmC,IAA7BJ,EAA4B,uDAAlB,KAAkB,iCACvD,OAAO,IAAIW,SAAQ,SAACC,EAASC,GAG3B,IAAMC,EAAQ,CACZhB,OAAQA,EACRC,IAAKA,GAGQ,MAAXC,IACFc,EAAMd,QAAUA,GAEH,SAAXF,GAAgC,QAAXA,GAA+B,WAAXA,IAC3CgB,EAAMV,KAAOA,GAEfZ,EAAMsB,GAAOb,MAAK,SAAUc,GAC1BH,EAAQG,MAEPC,OAAM,SAACC,GACNJ,EAAOI,UAtEM,EA4ErBC,OAAS,SAACC,GACR,IAAIhB,EAAe,EAAKiB,MAAMf,SAASgB,QAAO,SAACxB,GACzC,OAAOA,EAAQA,QAAQyB,cAAcC,MAAMJ,EAAEK,OAAOC,MAAMH,kBAEhE,EAAKb,SAAS,CAACN,kBA9Eb,EAAKiB,MAAQ,CACXvB,QAAS,QACTM,aAAc,GACduB,YAAa,KACbrB,SAAU,IANK,E,gEAUjBsB,KAAK/B,UAAU+B,KAAKP,MAAMvB,W,+BAyEpB,IAAD,OACP,OACE,0BAAM+B,UAAU,OACd,gDACA,4BAASA,UAAU,SAASC,QAAS,kBAAK,EAAKjC,UAAU,WAAzD,WACA,6BACA,6BACA,2BAAOkC,KAAK,OAAOF,UAAU,GAAGG,SAAUJ,KAAKT,SAC/C,+BACE,4BACE,uCACA,+CACA,yCACA,qCACA,yCACA,6CAEDS,KAAKP,MAAMjB,cAAgBwB,KAAKP,MAAMjB,aAAa6B,OAAS,GAAKL,KAAKP,MAAMjB,aAAa8B,KAAI,SAAC7B,EAAM8B,GACnG,OACE,wBAAIA,IAAKA,GACP,4BAAK9B,EAAKP,SACV,4BAAKO,EAAK+B,YACV,4BAAK/B,EAAKgC,UACV,4BAAKhC,EAAKiC,WACV,4BAAKjC,EAAKkC,gBACV,4BAAK,EAAKlB,MAAMmB,kBAOxB,6BACA,yBAAKC,IAAI,iFAAiFC,MAAM,a,GArHpFC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvB,MACvB,2DCZNwB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdxC,OAAM,SAAAC,GACLwC,QAAQxC,MAAMA,EAAMyC,c","file":"static/js/main.ee5426b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nconst axios = require('axios');\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      country: 'Nepal',\n      covid19Stats: [],\n      lastChecked: null,\n      original: []\n    }\n  }\n  componentDidMount() {\n    this.getResult(this.state.country);\n  }\n\n\n\n  getResult= (country) => {\n    // let url = \"https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats\";\n    // if (country) {\n    //   let params = {\n    //     country\n    //   }\n    //   url = params ? url + \"?\" + Object.entries(params).map(e => e.join('=')).join('&') : url;\n    // }\n    //\n    // this.HTTP('get',url,null,{\n    //   \"x-rapidapi-host\": \"covid-19-coronavirus-statistics.p.rapidapi.com\",\n    //   \"x-rapidapi-key\": \"3bce6a71b0mshc678eb7c1d69a2bp145a52jsn67a3fd5b2b70\"\n    // })\n    // .then((result) => {\n    //   let { covid19Stats, lastChecked} = result.data.data;\n    //   this.setState({covid19Stats, lastChecked:new Date(lastChecked).toLocaleDateString()})\n    // });\n\n\n    axios({\n       method: 'get',\n       url: 'https://api.collectapi.com/corona/countriesData',\n       headers: {\n         \"content-type\": \"application/json\",\n         \"authorization\": \"apikey 62Nz3HHBffJoueZMgYGrzg:6kwzSDcb836gKL7PE8VK6w\"\n       }\n     })\n      .then((result) => {\n        let covid19Stats = result.data.result;\n        let original =  result.data.result;\n        original.some(item => item.country == 'Nepal' && original.unshift(item))\n        this.setState({covid19Stats, original})\n      })\n\n  }\n\n  HTTP = (method, url, data, headers = null, fullUrl) => {\n  return new Promise((resolve, reject) => {\n\n\n    const query = {\n      method: method,\n      url: url\n    }\n\n    if (headers != null) {\n      query.headers = headers;\n    }\n    if (method === 'post' || method === 'put' || method === 'delete') {\n      query.data = data;\n    }\n    axios(query).then(function (response) {\n      resolve(response);\n    })\n      .catch((error) => {\n        reject(error)\n\n      })\n  })\n}\n\nsearch = (e) => {\n  let covid19Stats = this.state.original.filter((country) => {\n        return country.country.toLowerCase().match(e.target.value.toLowerCase());\n      });\n  this.setState({covid19Stats})\n\n}\nrender() {\n  return (\n    <main className=\"App\">\n      <h1>COVID-19 Updates</h1>\n      <button  className=\"button\" onClick={() =>this.getResult('Nepal')}>Refresh</button>\n      <br/>\n      <br/>\n      <input type=\"text\" className=\"\" onChange={this.search}/>\n      <table>\n        <tr>\n          <th>Country</th>\n          <th>Confirmed Cases</th>\n          <th>New Cases</th>\n          <th>Death</th>\n          <th>Recovered</th>\n          <th>Active Cases</th>\n        </tr>\n        {this.state.covid19Stats && this.state.covid19Stats.length > 0 && this.state.covid19Stats.map((data, key) =>{\n          return(\n            <tr key={key}>\n              <td>{data.country}</td>\n              <td>{data.totalCases}</td>\n              <td>{data.newCases}</td>\n              <td>{data.newDeaths}</td>\n              <td>{data.totalRecovered}</td>\n              <td>{this.state.activeCases}</td>\n            </tr>\n          )\n        })}\n\n\n      </table>\n      <br/>\n      <img src=\"https://www.luxuryholidaynepal.com/uploads/articles/images/corona%20virous.jpg\" width=\"600\"/>\n    </main>\n  )\n}\n\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}